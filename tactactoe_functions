Step 1: Write a function that can print out a board. Set up your board as a list, where each index 1-9 corresponds with a number on a number pad, so you get a 3 by 3 board representation.
from IPython.display import clear_output

def display_board(board):
    clear_output()
    print(board[1] + '|' + board[2] + '|' + board[3])
    print('-----')
    print(board[4] + '|' + board[5] + '|' + board[6])
    print('-----')
    print(board[7] + '|' + board[8] + '|' + board[9])

TEST Step 1: run your function on a test version of the board list, and make adjustments as necessary
test_board = ['#','X','O','O','X','O','X','O','X','O']
display_board(test_board)

Step 2: Write a function that can take in a player input and assign their marker as 'X' or 'O'. Think about using while loops to continually ask until you get a correct answer.

def player_input():
    value = False
    while not value:
        player1 = input("Player1: Please pick a marker 'X' or 'O'")
        if player1 == 'X':
            player2 = 'O'
            break
        elif player1 == 'O':
            player2 = 'X'
            break
        return player1,player2

TEST Step 2: run the function to make sure it returns the desired output
player_input()

Step 3: Write a function that takes in the board list object, a marker ('X' or 'O'), and a desired position (number 1-9) and assigns it to the board.

def place_marker(board, marker, position):
    board[position]=marker
    print(board)

TEST Step 3: run the place marker function using test parameters and display the modified board
place_marker(test_board,'X',7)
display_board(test_board)

*Step 4: Write a function that takes in a board and a mark (X or O) and then checks to see if that mark has won. *
def win_check(board, mark):
    if board[1] == mark and board[2] == mark and board[3] == mark:
        return True
    elif board[1] == mark and board[5] == mark and board[9] == mark:
        return True
    elif board[1] == mark and board[4] == mark and board[7] == mark:
        return True
    elif board[2] == mark and board[5] == mark and board[8] == mark:
        return True
    elif board[4] == mark and board[5] == mark and board[6] == mark:
        return True
    elif board[3] == mark and board[5] == mark and board[7] == mark:
        return True
    elif board[7] == mark and board[8] == mark and board[9] == mark:
        return True
    elif board[4] == mark and board[5] == mark and board[6] == mark:
        return True
    return False

TEST Step 4: run the win_check function against our test_board - it should return True

win_check(test_board,'O')

Step 5: Write a function that uses the random module to randomly decide which player goes first. You may want to lookup random.randint() Return a string of which player went first.

import random

def choose_first():
    player = random.randint(1,2)
    return player

choose_first()

Step 6: Write a function that returns a boolean indicating whether a space on the board is freely available.

def space_check(board, position):
    return board[position] == " "

space_check(test_board,7)

Step 7: Write a function that checks if the board is full and returns a boolean value. True if full, False otherwise.

def full_board_check(board):
    for i in range(len(board)):
        if board[i] == " ":
            return False
    return True

full_board_check(test_board)

Step 8: Write a function that asks for a player's next position (as a number 1-9) and then uses the function from step 6 to check if it's a free position. If it is, then return the position for later use.

def player_choice(board):
    position = 0
    while not space_check(board,position):
        position = int(input('Choose a position 1-9 '))
        print("That position is not empty please chose another")
    return position

player_choice(test_board)

Step 9: Write a function that asks the player if they want to play again and returns a boolean True if they do want to play again.
def replay():
    play_again = input("Do you want to play again: 'Yes' or 'No'")
    return play_again == 'Yes'

replay()

Step 10: Here comes the hard part! Use while loops and the functions you've made to run the game!

Fuckedddd

